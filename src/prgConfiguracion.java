/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Color;
import javax.swing.JOptionPane;
import java.io.*;
import jdk.nashorn.internal.objects.NativeString;
import java.io.FileWriter;
import java.awt.Image;
import javax.swing.ImageIcon;
/**
 *
 * @author jairo.hamon
 */
public class prgConfiguracion extends javax.swing.JFrame {

    /**
     * Creates new form prgConfiguracion
     */
    public prgConfiguracion() {
        initComponents();
        this.getContentPane().setBackground(Color.WHITE);
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(getClass().getResource("/Imagenes/favicon.png")).getImage());
   }
    
   
    
    public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCodigoVerificacion = new javax.swing.JButton();
        lblCodigoVerificacion = new javax.swing.JLabel();
        lblCodigoPrestador = new javax.swing.JLabel();
        lblUsuarioSFTP = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtCodigoVerificacion = new javax.swing.JTextField();
        txtCodigoPrestador = new javax.swing.JTextField();
        txtUsuarioSFTP = new javax.swing.JTextField();
        txtContrasegnaSFTP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configuración Validador Local");
        setBackground(java.awt.SystemColor.controlLtHighlight);
        setResizable(false);

        btnCodigoVerificacion.setText("Verificar");
        btnCodigoVerificacion.setToolTipText("");
        btnCodigoVerificacion.setName("btvVerificar"); // NOI18N
        btnCodigoVerificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodigoVerificacionActionPerformed(evt);
            }
        });

        lblCodigoVerificacion.setText("Codigo de Verificación");

        lblCodigoPrestador.setText("Código Prestador");

        lblUsuarioSFTP.setText("Usuario SFTP");

        jLabel1.setText("Contraseña");

        txtCodigoVerificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoVerificacionActionPerformed(evt);
            }
        });

        txtCodigoPrestador.setEditable(false);

        txtUsuarioSFTP.setEditable(false);

        txtContrasegnaSFTP.setEditable(false);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/logo_spe.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Validador Local");

        jLabel4.setText("<html>Ingrese el Código de Validación para tener acceso al validdor y a la carpeta del SFTP en la Unidad de Empleo</html>");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Todos los derechos reservados. Unidad del Servicio Público de Empleo.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1)
                                            .addComponent(lblUsuarioSFTP)
                                            .addComponent(lblCodigoPrestador)
                                            .addComponent(lblCodigoVerificacion))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtCodigoVerificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(txtContrasegnaSFTP, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtUsuarioSFTP, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtCodigoPrestador, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(btnCodigoVerificacion))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodigoVerificacion)
                    .addComponent(txtCodigoVerificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodigoPrestador)
                    .addComponent(txtCodigoPrestador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuarioSFTP)
                    .addComponent(txtUsuarioSFTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtContrasegnaSFTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCodigoVerificacion)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblCodigoVerificacion.getAccessibleContext().setAccessibleName("lblCodigo");
        lblCodigoVerificacion.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCodigoVerificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodigoVerificacionActionPerformed
        // TODO add your handling code here:
        
            String trandformada, primeraPalabra, segundaPalabra, terceraPalabra, Archivo = "";
            int primeraPos, segundaPos, terceraPos = 0;
            try
            {
                if (txtCodigoVerificacion.getText().length() == 0)
                {
                    infoBox("Indique el código de validación por favor ", "Mensaje Solicitud");
                }
                else
                {
                    trandformada = txtCodigoVerificacion.getText();
                    trandformada = corrimientoDecifrado(trandformada);
                    primeraPos = Integer.parseInt(NativeString.substring(trandformada,0, 2));
                    primeraPalabra = NativeString.substring(trandformada,2, 2+primeraPos);
                    segundaPos = Integer.parseInt(NativeString.substring(trandformada,primeraPos + 2,primeraPos + 2 + 2));
                    segundaPalabra = NativeString.substring(trandformada,primeraPos + 4, primeraPos + 4 + segundaPos);
                    terceraPos = Integer.parseInt(NativeString.substring(trandformada,primeraPos + segundaPos + 4, primeraPos + segundaPos + 4 + 2));
                    terceraPalabra = NativeString.substring(trandformada,primeraPos + segundaPos + 6,primeraPos + segundaPos + 6 + terceraPos);
                    trandformada = padLeftZeros(Integer.toString(primeraPos),2)+ invertir(primeraPalabra)+ padLeftZeros(Integer.toString(segundaPos), 2) + invertir(segundaPalabra) + padLeftZeros(Integer.toString(terceraPos), 2)+ invertir(terceraPalabra) ;
                    txtCodigoPrestador.setText(invertir(primeraPalabra));
                    txtUsuarioSFTP.setText(invertir(segundaPalabra));
                    txtContrasegnaSFTP.setText(invertir(terceraPalabra));
                    
                    String Directorio = new File("").getAbsolutePath();
                    
                    Archivo = Directorio.toString() + "\\Cnf.ini";
                    FileWriter fujoArchivo = new FileWriter(Archivo);
                    
                    
                    try {
                        
			//crea el flujo para escribir en el archivo
			fujoArchivo = new FileWriter(Archivo);
                        BufferedWriter BuffArchivo = new BufferedWriter(fujoArchivo);
                        BuffArchivo.write(txtCodigoPrestador.getText());
                        BuffArchivo.newLine();
                        BuffArchivo.write(txtUsuarioSFTP.getText());
                        BuffArchivo.newLine();
                        BuffArchivo.write(txtContrasegnaSFTP.getText());
                        BuffArchivo.close();
                        
                        infoBox("Se creo el archivo " + Archivo, "Mensaje");
                        infoBox("Se configuro el sistema de manera correcta, puede cerrar el formulario. ", "Mensaje del Sistema");
                        
                        new prgValidaArchivo().setVisible(true);
                        this.setVisible(false);
                    }
                    catch(IOException ex) 
                    {
                        infoBox("El codigo ingresado presenta novedades, Mensaje: ", "Error");    
                    }

                    /*StreamWriter srtwresultado = new StreamWriter(Archivo);
                    srtwresultado.WriteLine(txtCodigoPrestador.Text);
                    srtwresultado.WriteLine(txtUsuarioSFTP.Text);
                    srtwresultado.WriteLine(txtContrasegnaSFTP.Text);
                    srtwresultado.Close();
                    */
                }
            }
            catch(Exception ex)
            {
                infoBox("El codigo ingresado presenta novedades.", "Error");    
            }

            
    }//GEN-LAST:event_btnCodigoVerificacionActionPerformed

    private String invertir(String sCadena)
        {
            int largo = sCadena.length();
            String sNuevaCadena = "";
            try
            {
                for (int porlettra = 1; porlettra <= largo; porlettra++)
                {
                    sNuevaCadena = sNuevaCadena + NativeString.substring(sCadena,largo - porlettra,largo - porlettra + 1);
                }
            }
            catch (Exception ex)
            {
                infoBox(ex.getMessage(),"Mensaje de Error");
            }

            return sNuevaCadena;
        }
    
    public String padLeftZeros(String inputString, int length) {
    if (inputString.length() >= length) {
        return inputString;
    }
    StringBuilder sb = new StringBuilder();
    while (sb.length() < length - inputString.length()) {
        sb.append('0');
    }
    sb.append(inputString);
 
    return sb.toString();
}
    
    private String corrimientoDecifrado(String sCadena)
        {
            String sNuevaCadena = "";
            int largo = sCadena.length();
            int valAscii = 0;
            String letra = "";
            String letraTransformada = "";
            int AsciiControl = 0;
            int control = -15;

            String[] caracterEquivalente = { "!", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "{", "|", "}", "~" };
            String[] caracterOriginal = { "m", "r", "o", "C", "B", "s", "7", "~", "d", "e", "g", "(", "=", "^", "M", "?", "-", "*", "#", "j", ">", "w", "W", "!", "f", "a", "u", "v", "3", "`", "'", "4", ")", "Q", "U", "[", "9", "L", "O", ",", "c", "0", "1", "8", "Y", "<", ";", "\\", "$", "E", "A", "n", "D", "h", "k", "J", "+", "5", "@", "/", "6", ":", "P", "2", "V", "y", "I", "R", "&", "F", "]", "S", "N", "b", "X", "{", "%", "p", "|", "Z", "H", "x", "G", "q", "l", ".", "K", "i", "t", "z", "}", "_", "T" };
            
            
            
            try
            {
                for (int porlettra = 0; porlettra < largo; porlettra++)
                {
                    letra = NativeString.substring(sCadena,porlettra, porlettra + 1);
                    for (int recorreArreglo = 0; recorreArreglo < 93; recorreArreglo++)
                    {
                        if (letra.equals(caracterOriginal[recorreArreglo])) 
                        {
                            letraTransformada = caracterEquivalente[recorreArreglo].toString();
                            break;
                        }
                    }
                    sNuevaCadena = sNuevaCadena.toString() + letraTransformada.toString();
                }
            }
            catch (Exception ex)
            {
                sNuevaCadena = ex.getMessage();
                infoBox(sNuevaCadena, "Mensaje de Error");
            }
            return sNuevaCadena;
        }

    
    private void txtCodigoVerificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoVerificacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoVerificacionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(prgConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(prgConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(prgConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prgConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        File archivoConfiguracion = new File("Cnf.ini");
        
        if (!archivoConfiguracion.exists()) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new prgConfiguracion().setVisible(true);
                }
            });
        }
        else
        {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new prgValidaArchivo().setVisible(true);
                }
            });
        }

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCodigoVerificacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblCodigoPrestador;
    private javax.swing.JLabel lblCodigoVerificacion;
    private javax.swing.JLabel lblUsuarioSFTP;
    private javax.swing.JTextField txtCodigoPrestador;
    private javax.swing.JTextField txtCodigoVerificacion;
    private javax.swing.JTextField txtContrasegnaSFTP;
    private javax.swing.JTextField txtUsuarioSFTP;
    // End of variables declaration//GEN-END:variables
}
