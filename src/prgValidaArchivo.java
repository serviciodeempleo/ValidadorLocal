
import org.mozilla.universalchardet.UniversalDetector;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import jdk.nashorn.internal.objects.NativeString;
import com.jcraft.jsch.*;
import java.nio.file.Path;
import java.nio.file.Paths;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jairo.hamon
 */
public class prgValidaArchivo extends javax.swing.JFrame {

    /**
     * Creates new form prgValidaArchivo
     */
    int numerolineas;
    String NombreArchivo, NombreDirectorioArchivo = "";
    String vartxtValidaContenidoArchivo = "";

    int CodigoPrestador = 0;
    String username = "";
    String password = "";
        
    public prgValidaArchivo() {
        initComponents();
        this.getContentPane().setBackground(Color.WHITE);
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(getClass().getResource("/Imagenes/favicon.png")).getImage());        
                
        String strcnf, Linea = "";
        int NUmLinea = 0;
        
        String Directorio = new File("").getAbsolutePath();
                    
        strcnf = Directorio + "\\Cnf.ini";
        
            try
            {
                
                    FileReader fujoArchivo = new FileReader(strcnf);
                    
                    BufferedReader BuffArchivo = new BufferedReader(fujoArchivo);
                    CodigoPrestador = Integer.parseInt(BuffArchivo.readLine());
                    username =  BuffArchivo.readLine();
                    password =  BuffArchivo.readLine();
                    BuffArchivo.close();
                       
                    
                    btnArchivo.setEnabled(true);
                    imageLabel.setVisible(false);

            }
            catch (Exception ex)
            {
                infoBox(ex.getMessage(),"Error");
            }
    }

    
    public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtArchivo = new javax.swing.JTextField();
        btnValida = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnExporta = new javax.swing.JButton();
        txtDirectorioArchivo = new javax.swing.JTextField();
        btnEnviarArchivo = new javax.swing.JButton();
        btnArchivo = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtValidaNombreArchivo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtValidaContenidoArchivo = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtMensajeNovedad = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtMensajeResultados = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Validador de Archivos Local");
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(710, 600));
        setResizable(false);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/logo_spe.png"))); // NOI18N

        jLabel4.setText("<html>Realice la validación del archivo Resolución 129 de 2015, si todo está bien envíe el archivo a la Unidad Administrativa Especial del Servicio Público de Empleo</html>");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Validador Local");

        btnValida.setText("Validar");
        btnValida.setEnabled(false);
        btnValida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidaActionPerformed(evt);
            }
        });

        jLabel1.setText("Resultado validación estructura del archivo");

        jLabel5.setText("Resultado del Proceso");

        jLabel6.setText("Mensaje de Novedades");

        jLabel7.setText("Mensaje de Resultados");

        btnExporta.setText("Exportar a:");
        btnExporta.setEnabled(false);

        btnEnviarArchivo.setText("Enviar Archivo");
        btnEnviarArchivo.setEnabled(false);
        btnEnviarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarArchivoActionPerformed(evt);
            }
        });

        btnArchivo.setText("Archivo:");
        btnArchivo.setEnabled(false);
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cargando.gif"))); // NOI18N
        imageLabel.setAlignmentX(0.5F);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Todos los derechos reservados. Unidad del Servicio Público de Empleo.");

        txtValidaNombreArchivo.setColumns(20);
        txtValidaNombreArchivo.setRows(2);
        jScrollPane1.setViewportView(txtValidaNombreArchivo);

        txtValidaContenidoArchivo.setColumns(20);
        txtValidaContenidoArchivo.setRows(2);
        jScrollPane2.setViewportView(txtValidaContenidoArchivo);

        txtMensajeNovedad.setColumns(20);
        txtMensajeNovedad.setRows(5);
        jScrollPane3.setViewportView(txtMensajeNovedad);

        txtMensajeResultados.setColumns(20);
        txtMensajeResultados.setRows(5);
        jScrollPane4.setViewportView(txtMensajeResultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imageLabel)
                .addGap(51, 51, 51))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnArchivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtArchivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnValida))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExporta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDirectorioArchivo))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                        .addGap(172, 172, 172)
                        .addComponent(btnEnviarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(190, 190, 190))
                            .addComponent(jScrollPane4)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnArchivo)))
                    .addComponent(btnValida))
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExporta)
                    .addComponent(txtDirectorioArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEnviarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
        JFileChooser ArchivoLeer = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de texto(*.txt)", "txt");
        ArchivoLeer.setFileFilter(filter);
        String dirhome = new File("").getAbsolutePath();
        ArchivoLeer.setCurrentDirectory(new File(dirhome));
        
        try
        {
        if (ArchivoLeer.showDialog(null, "Seleccione el archivo a validar") == JFileChooser.APPROVE_OPTION)
            {
                NombreDirectorioArchivo =ArchivoLeer.getSelectedFile().toString();
                NombreArchivo = ArchivoLeer.getName(ArchivoLeer.getSelectedFile());
                txtArchivo.setText(NombreDirectorioArchivo);
                //NombreDirectorioArchivo = openFileDialog1.FileName;

            }


            if (NombreArchivo != null)
            {
                btnValida.setEnabled(true);
                numerolineas = CuentaLineasArchivo(txtArchivo.getText());
                txtMensajeNovedad.setText("");
                txtValidaContenidoArchivo.setText("");
                txtValidaContenidoArchivo.setText("");
                txtValidaNombreArchivo.setText("");
                txtMensajeResultados.setText("");
            }
            
        }
        catch(Exception ex)
        {
            
        }
    }//GEN-LAST:event_btnArchivoActionPerformed

    private void btnValidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidaActionPerformed
        try {
            // TODO add your handling code here:
            
            String ResultadoValidaArchivo;

            /***** Se valida el archivo en su estructura ****/
            ResultadoValidaArchivo = ValidaNombreArchivo(NombreArchivo, NombreDirectorioArchivo, CodigoPrestador);
            if (!"S".equals(ResultadoValidaArchivo))
            {
                txtValidaNombreArchivo.setText(ResultadoValidaArchivo);
            }
            else
            {
                txtValidaNombreArchivo.setText("El archivo en su estructura esta bien formado.");
            }
            
            /**** Se procede a verificar el contenido del archivo ****/
            validarContenido(NombreDirectorioArchivo);
            
        } catch (Throwable ex) {
            Logger.getLogger(prgValidaArchivo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnValidaActionPerformed

    private void btnEnviarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarArchivoActionPerformed
        String host = "ftp.serviciodeempleo.gov.co";
        
        new Thread() {
            @Override
            public void run() {
                imageLabel.setVisible(true);
            }
        }.start();
        
        new Thread() {
            @Override
            public void run() {
                try
                {
                    Path path = Paths.get(txtArchivo.getText()); 
                    String filename_final = path.getFileName().toString();

                    JSch jsch = new JSch();
                    Session session = jsch.getSession(username, host, 22022);
                    session.setPassword(password);
                    java.util.Properties config = new java.util.Properties();
                    config.put("StrictHostKeyChecking", "no");
                    session.setConfig(config);
                    session.connect();
                    ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");

                    sftpChannel.connect();            
                    sftpChannel.cd("/");

                    File uplfileStream = new File(NombreDirectorioArchivo);
                    sftpChannel.put(new FileInputStream(uplfileStream), filename_final);

                    sftpChannel.exit();
                    session.disconnect();

                    txtMensajeNovedad.setText(txtMensajeNovedad.getText() + System.lineSeparator() + 
                        "El archivo "+ NombreArchivo +" se envio de manera satisfactoria a la Unidad" + System.lineSeparator() + 
                        System.lineSeparator() + LocalDate.now() + System.lineSeparator() + System.lineSeparator() + "Gracias");
                    
                    infoBox("El archivo " + NombreArchivo + " se envio de manera satisfactoria a la Unidad" + System.lineSeparator() + 
                        System.lineSeparator() + LocalDate.now() + System.lineSeparator() + System.lineSeparator() + "Gracias", "Mensaje Exitoso");

                }
                catch(JSchException | SftpException | IOException ex)
                {
                    txtMensajeNovedad.setText(txtMensajeNovedad + System.lineSeparator() + ex.getMessage());
                    infoBox(ex.getMessage()+ System.lineSeparator() + System.lineSeparator() + LocalDate.now(),"Mensaje Error");
                }
                
                imageLabel.setVisible(false);
             }
        }.start();
    }//GEN-LAST:event_btnEnviarArchivoActionPerformed
    
    public String ValidaNombreArchivo(String NombreArchivo, String DirectorioNombreArchivo, int CodigoPrestador)throws Throwable
        {
            String mensajeOK = "";
            String mensajeKO = "";
            String codificacion = "";
        try {
    

            Pattern valida = Pattern.compile("^([0-9]{13})(.txt)");
            
            Matcher matchvalida = valida.matcher(NombreArchivo);

            if (matchvalida.matches())
            {
                mensajeOK = "S";
            }
            else
            {
                mensajeKO = mensajeKO + "La estructura del nombre del archivo no corresponde #####AAAAMMDD.txt, #####: Código del Prestador, AAAA: Año de generación del archivo, MM: Mes de generación del archivo, DD: Día de generación del archivo, .txt: Extención del archivo." + System.lineSeparator();
            }


            if (CodigoPrestador == Integer.parseInt(NativeString.substring(NombreArchivo,0, 5)))
            {
                mensajeOK = "S";
            }
            else
            {
                mensajeKO = mensajeKO + "El Código del Prestador en el nombre del archivo no correponde con la asignación." + System.lineSeparator();
            }

            String codigo = detectarCodificacion(DirectorioNombreArchivo);
                 
            if(codigo.equals("UTF-8")){
                mensajeOK = "S";
            }
            else{
                mensajeKO = mensajeKO + "El archivo no tiene codificación de tipo UTF8." + System.lineSeparator();                  
            }
                      
        }
        catch (Exception ex){
               txtValidaNombreArchivo.setText(ex.getMessage());
        }

        if (mensajeKO.equals(""))
        {
            return (mensajeOK);
        }
        else
        {
            return (mensajeKO);
        }

    }



    public String detectarCodificacion(String strRutaArchivoP)throws Throwable{
        byte[] buf;
        java.io.FileInputStream fis;
        UniversalDetector detector;
        int nread;
        String encoding = "";
        try{    
            buf= new byte[4096];
            fis = new java.io.FileInputStream(strRutaArchivoP);
            detector = new UniversalDetector(null);
            while ((nread = fis.read(buf)) > 0 && !detector.isDone()) {
              detector.handleData(buf, 0, nread);
            }
            detector.dataEnd();
            encoding = detector.getDetectedCharset();
            detector.reset();
            
        }catch (IOException e) {
            System.out.println("Error en - Clase(" + new Exception().getStackTrace()[0].getClassName() + ") "
                      + "- Método(" + new Exception().getStackTrace()[0].getMethodName() + ")" + System.lineSeparator() + e);
        }
        return encoding;
    }
    
    
    
    public void validarContenido(String NombreDirectorioArchivo) throws ParseException
    {
        int contador = 0;
        int contadorOK = 0;
        int contadorKO = 0;

        int cuentaincidencias = 0;
        int posinicial;
        int posfinal;
        int NumeroLinea = 0;

        boolean entraaprocesototal = true;

        int posinicialmun;
        int posfinalmun;

        int valornumerico = 0;
        String valorstring = "";

        int campos;
        String varcodprestador = "";
        String frase = "";
        String expresiondevalidacion = "";
        String verEntrada = "S";
        String verEntradaMunicipio = "N";
        String Linea;
        String dominio = "";
        String especial = "";
        String valor;
        long tiempoTranscurrido;
        
        //DateTime dttimepoReg = DateTime.Now;
        //DateTime dttimepoTotal = DateTime.Now;

        String archivoOK = "";
        String archivoKO = "";

        String varMensajeNovedad = "";
        String varMensajeResultados = "";


        int val5;

        int cuentaExcepcionada = 0;

        int count;
        int cuenta = 1;
        int cuentrPBar = 0;
        int factorPBat = 1;


        /*** MENSAJERIA ***/
        String variable = "";
        String IDMunicipio = "";
        
        //ARREGLO CONTROLA VARIOS PRESTADORES
        String[][] matArr = new String[100000][5];
        //ARREGLO CONTROLA Vencidos
        int[] matVencidos = new int[1000];

        boolean BoMunicipio = false;

        int entro, maxi, maxVencidos;
        entro = maxi = maxVencidos = 0;
        String EstadoPrestador;
        EstadoPrestador = "";

        String[] VariableNombre = new String[]{ "CODIGO_PRESTADOR", "CODIGO_VACANTE", "TITULO_VACANTE", "DESCRIPCION_VACANTE", "TIEMPO_EXPERIENCIA_RELACIONADA", "ID_NIVEL_ESTUDIOS_REQUERIDOS", "DISCIPLINA_PROFESION", "SALARIO_INGRESO", "CANTIDAD_VACANTES", "CARGO", "ID_TIPO_DOCUMENTO_EMPLEADOR", "NUMERO_IDENTIFICACION_EMPLEADOR", "NOMBRE_EMPLEADOR", "SOLICITUD_EXCEPCION_PUBLICACION", "FECHA_PUBLICACION", "FECHA_VENCIMIENTO", "CODIGO_MUNICIPIO", "SECTOR_ECONOMICO", "TIPO_CONTRATO", "TELETRABAJO", "DISCAPACIDAD", "URL_DETALLE_VACANTE" };
        String[] VariableTipo = new String[]{ "string", "string", "string", "string", "int", "int", "string", "string", "int", "string", "int", "string", "string", "string", "date", "date", "string", "string", "int", "int", "int", "string" };
        Object[] VariableValor = new Object[] { "", "", "", "", 0, 0, "", "", 0, "", 0, "", "", "", LocalDate.now(), LocalDate.now(), "", "", 0, 0, 0, "" };
        
        txtMensajeNovedad.setText("");
        txtMensajeResultados.setText("");
        txtValidaContenidoArchivo.setText("");
        
        // 1. Lee el archivo AQUI
        try
        {
            try (BufferedReader SRArchivoActual = new BufferedReader(new InputStreamReader( new FileInputStream(NombreDirectorioArchivo), "Cp1252"))) {
                mensajeValidaContenido("Archivo a trabajar: " + NombreDirectorioArchivo + System.lineSeparator());
                
                //cuentrPBar = System.Convert.ToInt32((numerolineas / 100) + 1);
                
                while ((Linea = SRArchivoActual.readLine()) != null)
                {
                    //dttimepoReg = DateTime.Now;
                    NumeroLinea = NumeroLinea + 1;
                    cuenta = 1;
                    posinicial = 0;
                    posfinal = 0;
                    campos = 0;
                    frase = "";
                    verEntrada = "S";
                    campos = 22;
                    EstadoPrestador = "0";
                    count = 0;
                    
                    String[] dsMunicipio;
                    String[] dsExpresion;
                    
                    if (!EstadoPrestador.equals("2")) /**recordar borrar esto **/
                    {
                        count = (Linea.length() - Linea.replace("|$$|", "").length()) / 4;
                        if (count == 21){
                            
                            for (int i = 1; i <= campos; i++)
                            {
                                /*** Captura la posisicion inicial y final para extraer el fragmento de la linea ***/
                                if (i == 1)
                                {
                                    posfinal = Linea.indexOf("|$$|", posinicial) + 4;
                                }
                                else
                                {
                                    if (i < campos)
                                    {
                                        posfinal = Linea.indexOf("|$$|", posinicial + 4) + 4;
                                    }
                                    else
                                    {
                                        posfinal = Linea.length();
                                    }
                                }
                                
                                /*** es el fragmento de la línea que se va verificar ***/
                                frase = Linea.substring(posinicial, posfinal);
                                
                                /**** Asigna el valor al parámetro ****/
                                dsExpresion = expresion(cuenta);//** codigo para traer la espresión regular
                                
                                if(dsExpresion.length > 0){
                                    expresiondevalidacion = dsExpresion[0]; //"Expresion"
                                    variable = dsExpresion[1]; //"campo"
                                    dominio = dsExpresion[2]; //"Validacion_Domino"
                                    especial = dsExpresion[3]; //"Validacion_Especial"
                                }
                                
                                Pattern valida = Pattern.compile(expresiondevalidacion);
                                Matcher matchvalida = valida.matcher(frase);
                                entraaprocesototal = true;
                                
                                if (!matchvalida.matches())
                                {
                                    entraaprocesototal = false;
                                    if ("DEFECTON".equals(dominio) || "DEFECTO0".equals(dominio))
                                    {
                                        if ("".equals(frase.replace("|$$|", "")))
                                        {
                                            entraaprocesototal = true;
                                        }
                                    }
                                }
                                
                                if (entraaprocesototal)
                                {
                                    if ("int".equals(VariableTipo[cuenta - 1]))
                                    {
                                        try
                                        {
                                            if(!"".equals(frase.replace("|$$|", "")))
                                            {
                                                VariableValor[cuenta - 1] = Integer.parseInt(frase.replace("|$$|", ""));
                                            }
                                            else
                                            {
                                                VariableValor[cuenta - 1] = null;
                                            }
                                        }
                                        catch(NumberFormatException ex)
                                        {
                                            VariableValor[cuenta - 1] = null;
                                        }
                                    }
                                    
                                    if ("string".equals(VariableTipo[cuenta - 1]))
                                    {
                                        VariableValor[cuenta - 1] = frase.replace("|$$|", "");
                                    }
                                    
                                    if ("date".equals(VariableTipo[cuenta - 1]))
                                    {
                                        try
                                        {
                                            frase = frase.replace("|$$|", "");
                                            SimpleDateFormat Dformat = new SimpleDateFormat("dd/MM/yyyy");
                                            Date Dfecha = Dformat.parse(frase);
                                            VariableValor[cuenta - 1] = frase;
                                        }
                                        catch(NumberFormatException ex)
                                        {
                                            verEntrada = "N";
                                            cuentaincidencias = cuentaincidencias + 1;
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] la fecha no es valida, el dia no existe." + System.lineSeparator();
                                        }
                                    }

                                    /******* VERIFICA QUE EXISTA EL CODIGO DEL PRESTADOR ********/
                                    if ("PRESTADOR".equals(dominio))
                                    {
                                        /** No fue necesario modificar este paramento **/
                                    }
                                    
                                    if ("SOLICITUD_EXCEPCION_PUBLICACION".equals(variable))
                                    {
                                        if (VariableValor[cuenta - 1] == "S")
                                        {
                                            cuentaExcepcionada = cuentaExcepcionada + 1;
                                        }
                                    }
                                    
                                    /******* EL NUMERO DE VACANTES > 0  ********/
                                    if ("MAYORACERO".equals(especial))
                                    {
                                        if (Integer.parseInt(VariableValor[cuenta - 1].toString()) <= 0)
                                        {
                                            verEntrada = "N";
                                            cuentaincidencias = cuentaincidencias + 1;
                                            /*MensajeNovedad = MensajeNovedad +"Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + ": " + frase + " debe ser superior a cero \n";*/
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] debe ser superior a cero" + System.lineSeparator();
                                        }
                                    }
                                    
                                    /******* PROFESIONALES  ********/
                                    if ("PROFESIONALES".equals(especial))
                                    {
                                        val5 = Integer.parseInt(VariableValor[i - 2].toString());
                                        
                                        if (val5 == 1 || val5 == 2 || val5 == 3 || val5 == 4 || val5 == 10)
                                        {
                                            if (VariableValor[i - 1].equals("") || !VariableValor[i - 1].equals("NA"))
                                            {
                                                verEntrada = "N";
                                                cuentaincidencias = cuentaincidencias + 1;
                                                /*MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + ": " + frase + " De acuerdo a lo requerido en la resolución aquí debe venir un valor. \n";*/
                                                varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] de acuerdo al nivel de estudios ingresado debe colocar 'NA'" + System.lineSeparator();
                                            }
                                        }
                                        else
                                        {
                                            if (VariableValor[i - 1].equals("") || VariableValor[i - 1].equals("NA"))
                                            {
                                                verEntrada = "N";
                                                cuentaincidencias = cuentaincidencias + 1;
                                                /*MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + ": " + frase + " De acuerdo a lo requerido en la resolución aquí debe traer el valor 'NA'. \n";*/
                                                varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] Debe informar la Disciplina o Profesión." + System.lineSeparator();
                                            }
                                            
                                        }
                                        
                                    }

                                    /******* FECHA FIN DE VACANTE DEBE SER MENOR A 6 MESES ********/
                                    if ("MENORSEISMESES".equals(especial))
                                    {
                                        try
                                        {
                                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
                                            
                                            LocalDateTime ldt1 = LocalDateTime.parse(VariableValor[cuenta - 1].toString()+" 00:00:00", formatter);
                                            LocalDateTime ldt2 = LocalDateTime.parse(VariableValor[cuenta - 2].toString()+" 00:00:00", formatter);
                                            
                                            tiempoTranscurrido = ldt2.until(ldt1, ChronoUnit.MONTHS);
                                            
                                            if (tiempoTranscurrido > 6)
                                            {
                                                
                                                verEntrada = "N";
                                                cuentaincidencias = cuentaincidencias + 1;
                                                //MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + ": " + frase + " la vigencia de la vacante no debe ser superior a 6 meses. \n";
                                                varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] la vigencia de la vacante excede los 6 meses." + System.lineSeparator();
                                                
                                            }
                                            
                                        }
                                        catch(Exception ex)
                                        {
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] la fecha no es valida." + System.lineSeparator();
                                        }
                                    }
                                    
                                    /******* MENORIGUALHOY *******/
                                    if ("MENORIGUALHOY".equals(especial))
                                    {
                                        try
                                        {
                                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
                                            
                                            LocalDateTime ldt1 = LocalDateTime.parse(VariableValor[cuenta - 1].toString()+" 00:00:00", formatter);
                                            LocalDateTime ldt2 = LocalDateTime.now();
                                            
                                            if(ldt1.isAfter(ldt2)){
                                                verEntrada = "N";
                                                cuentaincidencias = cuentaincidencias + 1;
                                                //MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + ": " + frase + " La fecha de publicación no debe ser superior a la fecha actual. \n";
                                                varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] La fecha de publicación no debe ser superior a la fecha actual." + System.lineSeparator();
                                            }
                                            
                                        }
                                        catch(Exception ex)                                        
                                        {
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] la fecha no es valida." + System.lineSeparator();
                                        }
                                    }

                                    /******* MAYORIGUALHOY *******/
                                    if ("MAYORIGUALHOY".equals(dominio))
                                    {
                                        try
                                        {
                                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
                                            
                                            LocalDateTime ldt1 = LocalDateTime.parse(VariableValor[cuenta - 1].toString()+" 00:00:00", formatter);
                                            LocalDateTime ldt2 = LocalDateTime.now().plusDays(1);
                                            
                                            if(ldt1.isBefore(ldt2) || ldt1.isEqual(ldt2)){
                                                /*if (!EsBolsa(VariableValor[0].ToString()))
                                                {
                                                verEntrada = "N";
                                                cuentaincidencias = cuentaincidencias + 1;
                                                /*MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + ": " + frase + " La vacante debe ser vigente. \n";*/
                                                /*varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + " : [" + frase.ToString().Replace("|$$||$$|", "vacio").Replace("|$$|", "") + "] La vacante no es vigente. \n";
                                                }*/
                                            }
                                            
                                        }
                                        catch(Exception ex)
                                        {
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] la fecha no es valida." + System.lineSeparator();
                                        }
                                    }
                                    
                                    /********************* MASDEUNDIGITO **************************/
                                    if ("MASDEUNDIGITO".equals(dominio))
                                    {
                                        if (VariableValor[cuenta - 1].toString().length() <= 1)
                                        {
                                            verEntrada = "N";
                                            cuentaincidencias = cuentaincidencias + 1;
                                            /*MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + ": " + frase + " Identificación no valida. \n";*/
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] Identificación no valida." + System.lineSeparator();
                                        }
                                    }
                                    
                                    /********************** DEFECTON  *************************/
                                    if ("DEFECTON".equals(dominio))
                                    {
                                        if ("|$$||$$|".equals(frase))
                                        {
                                            VariableValor[cuenta - 1] = "N";
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] no es un valor valido" + System.lineSeparator();
                                        }
                                    }
                                    
                                    /********************** DEFECTO0 *************************/
                                    if ("DEFECTO0".equals(dominio))
                                    {
                                        if ("|$$||$$|".equals(frase))
                                        {
                                            VariableValor[cuenta - 1] = 0;
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] no es un valor valido" + System.lineSeparator();
                                        }
                                    }
                                    
                                    /********************** MENOSDEMIL *************************/
                                    if ("MENOSDEMIL".equals(dominio))
                                    {
                                        
                                        if (VariableValor[cuenta - 1].toString().length() > 1000)
                                        {
                                            verEntrada = "N";
                                            cuentaincidencias = cuentaincidencias + 1;
                                            /*MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + "  " + variable + ": " + frase + " Identificación no valida. \n";*/
                                            varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] La URL tiene más de 1000 digitos." + System.lineSeparator();
                                        }
                                    }
                                    
                                    /******* VERIFICA QUE EXISTA EL CODIGO DEL MUNICIPIO ********/
                                    if ("MUNICIPIOS".equals(dominio))
                                    {
                                        
                                        verEntradaMunicipio = "N";
                                        if (frase.length() >= 9)
                                        {
                                            posinicialmun = 0;
                                            posfinalmun = 0;
                                            
                                            for (int n = 1; n <= 33; n++)
                                            {
                                                posfinalmun = VariableValor[cuenta - 1].toString().indexOf("-", posinicialmun) + 1;
                                                if (posfinalmun == 0)
                                                {
                                                    posfinalmun = VariableValor[cuenta - 1].toString().length() + 1;
                                                    n = 34;
                                                }
                                                valor = VariableValor[cuenta - 1].toString().substring(posinicialmun, posfinalmun - posinicialmun - 1);
                                                posinicialmun = posfinalmun;
                                                
                                                if (valor.length() == 5)
                                                {
                                                    IDMunicipio = valor;
                                                    
                                                    if(Municipios(IDMunicipio).length > 0){
                                                        BoMunicipio = true;
                                                    }
                                                    
                                                    if (BoMunicipio == false)
                                                    {
                                                        verEntrada = "N";
                                                        cuentaincidencias = cuentaincidencias + 1;
                                                        /*MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + " El codigo del municipio: " + valor + " no existe \n";*/
                                                        varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + valor + "] no existe." + System.lineSeparator();
                                                    }
                                                    else
                                                    {
                                                        verEntradaMunicipio = "S";
                                                    }
                                                }
                                                else
                                                {
                                                    verEntrada = "N";
                                                    cuentaincidencias = cuentaincidencias + 1;
                                                    /*MensajeNovedad = MensajeNovedad + "Línea: " + System.Convert.ToString(NumeroLinea) + " El codigo del municipio: " + valor + " no es un valor valido \n";*/
                                                    varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + valor + "] no es un valor valido" + System.lineSeparator();
                                                }
                                            }

                                            if (verEntradaMunicipio.equals("N"))
                                            {
                                                verEntrada = "N";
                                            }                                            
                                        }
                                    }
                                }
                                else
                                {
                                    if (cuenta == 1)
                                    {
                                        frase = "|$$|" + frase;
                                    }
                                    if (cuenta == 23)
                                    {
                                        frase = frase + "|$$|";
                                    }
                                    mensajeValidaContenido(String.valueOf(cuenta) + " FALLA: " + frase + " EXR: " + expresiondevalidacion + System.lineSeparator());
                                    varMensajeNovedad = varMensajeNovedad + "Vacante: " + VariableValor[1] + " Línea: " + String.valueOf(NumeroLinea) + "  " + variable + " : [" + frase.replace("|$$||$$|", "vacio").replace("|$$|", "") + "] no es valida" + System.lineSeparator();
                                    verEntrada = "N";
                                    cuentaincidencias = cuentaincidencias + 1;
                                    
                                }
                                posinicial = posfinal - 4;
                                cuenta = cuenta + 1;
                                
                            }
                        }
                        else
                        {
                            verEntrada = "N";
                            cuentaincidencias = cuentaincidencias + 1;
                            varMensajeNovedad = varMensajeNovedad + "*** - La línea " + NumeroLinea + " no tiene la cantidad de variables requeridas." + System.lineSeparator();
                        }
                        
                        if (verEntrada.equals("S"))
                        {
                            contadorOK = contadorOK + 1;
                        }
                        else
                        {
                            contadorKO = contadorKO + 1;
                        }
                        
                        contador = contador + 1;
                        mensajeValidaContenido("Archivo: " + NombreArchivo + " Registro: " + NumeroLinea + System.lineSeparator());
                        
                        if (entro == 0)
                        {
                            matArr[maxi][0] = varcodprestador;
                            matArr[maxi][1] = String.valueOf(contadorOK);
                            matArr[maxi][2] = String.valueOf(contadorKO);
                            matArr[maxi][3] = String.valueOf(contador);
                            matArr[maxi][4] = String.valueOf(cuentaExcepcionada);
                            maxi = maxi + 1;
                        }
                        
                        entro = 0;
                        contador = 0;
                        contadorOK = 0;
                        contadorKO = 0;
                        cuentaExcepcionada = 0;
                        
                    }
                }
            }
            
            /*** CARGA TABLA DE CONTROL ********/
            for (int i = 0; i < maxi; i++)
            {
                contadorOK = contadorOK + Integer.parseInt((String.valueOf(matArr[i][1])));
                contadorKO = contadorKO + Integer.parseInt((String.valueOf(matArr[i][2])));
                contador = contador + Integer.parseInt((String.valueOf(matArr[i][3])));
            }

            /*** MUEVE LOS ARCHIVOS A PROCESADO ***/
            MueveArchivosProcesados(NombreArchivo);
            
            txtValidaContenidoArchivo.setText(vartxtValidaContenidoArchivo);
            /*** PREPARA CORREO ***/
            txtMensajeResultados.setText("------------------------------------------------------------" + System.lineSeparator() + archivoOK);
            txtMensajeResultados.setText(txtMensajeResultados.getText() + "Archivo: " + NombreArchivo + "  " + LocalDate.now() + archivoOK + System.lineSeparator());
            txtMensajeResultados.setText(txtMensajeResultados.getText() + "------------------------------------------------------------" + archivoOK + System.lineSeparator());
            txtMensajeResultados.setText(txtMensajeResultados.getText() + "Registros Cargados: " + contadorOK + archivoOK + System.lineSeparator());
            txtMensajeResultados.setText(txtMensajeResultados.getText() + "Registros Rechazados: " + contadorKO + archivoOK + System.lineSeparator());
            txtMensajeResultados.setText(txtMensajeResultados.getText() + "Registros Totales: " + contador + archivoOK + System.lineSeparator());

            if (contadorKO == 0)
            {
                btnEnviarArchivo.setEnabled(true);
            }
            btnExporta.setEnabled(true);
            
            if (varMensajeNovedad.length() > 0)
            {
                txtMensajeNovedad.setText("----------------------------------------------------------------------------- " + System.lineSeparator() + 
                    " Archivo: " + NombreArchivo + "  " + LocalDate.now() + System.lineSeparator() + "Numero de Incidencias: " + cuentaincidencias + System.lineSeparator() + 
                    "----------------------------------------------------------------------------- " + System.lineSeparator() + varMensajeNovedad);
                /*DiligenciaArchivoResultados(MensajeNovedadTotal, archivoKO);*/
            }
            
            contador = 0;
            contadorOK = 0;
            contadorKO = 0;
            
        }
        catch(IOException | NumberFormatException ex)
        {
            mensajeValidaContenido(ex.getMessage() + System.lineSeparator());
        }

        //System.TimeSpan difTotal = DateTime.Now.Subtract(dttimepoTotal);
        mensajeValidaContenido("Finalizo el proceso de validación del archivo: " + NombreDirectorioArchivo + System.lineSeparator());

    }
    
    private void MueveArchivosProcesados(String ArchivoActual)
    { 
        
    }
    
    public void mensajeValidaContenido(String Mensaje)
    {
        vartxtValidaContenidoArchivo = vartxtValidaContenidoArchivo + LocalDate.now() + " " + " " + Mensaje;
    }
    
    public String[] expresion(int cuenta)
    {
        String valor1,valor2,valor3,valor4;
        valor1=valor2=valor3=valor4="";
        
        String[] VariableNombre = new String[]{"CODIGO_PRESTADOR", "CODIGO_VACANTE", "TITULO_VACANTE", "DESCRIPCION_VACANTE", "TIEMPO_EXPERIENCIA_RELACIONADA", "ID_NIVEL_ESTUDIOS_REQUERIDOS", "DISCIPLINA_PROFESION", "SALARIO_INGRESO", "CANTIDAD_VACANTES", "CARGO", "ID_TIPO_DOCUMENTO_EMPLEADOR", "NUMERO_IDENTIFICACION_EMPLEADOR", "NOMBRE_EMPLEADOR", "SOLICITUD_EXCEPCION_PUBLICACION", "FECHA_PUBLICACION", "FECHA_VENCIMIENTO", "CODIGO_MUNICIPIO", "SECTOR_ECONOMICO", "TIPO_CONTRATO", "TELETRABAJO", "DISCAPACIDAD", "URL_DETALLE_VACANTE", "ESTADO_VACANTE"};
        String[] ExpresionRegular = new String[]{"^([0-9]{1,5})\\|\\$\\$\\|", "\\|\\$\\$\\|(.{1,20})\\|\\$\\$\\|", "\\|\\$\\$\\|(.{1,200})\\|\\$\\$\\|", "\\|\\$\\$\\|(.{5,4000})\\|\\$\\$\\|", "\\|\\$\\$\\|(.[0-9]{0,3})\\|\\$\\$\\|", "\\|\\$\\$\\|(1|2|3|4|5|6|7|8|9|10|11)\\|\\$\\$\\|", "\\|\\$\\$\\|([a-z/A-Z/0-9/., áéíóúñüÁÉÍÓÚÑÜ-]{1,300})\\|\\$\\$\\|", "\\|\\$\\$\\|([0-9]{1,12}|[0-9]{1,12}-[0-9]{1,12}|[0-9]{1,12}-\\$|A convenir|A Convenir|A CONVENIR)\\|\\$\\$\\|", "\\|\\$\\$\\|([0-9]{1,4})\\|\\$\\$\\|", "\\|\\$\\$\\|(.{1,300})\\|\\$\\$\\|", "\\|\\$\\$\\|(1|2|3|4|5)\\|\\$\\$\\|", "\\|\\$\\$\\|(.{1,50})\\|\\$\\$\\|", "\\|\\$\\$\\|(.{1,300})\\|\\$\\$\\|", "\\|\\$\\$\\|(S|N)\\|\\$\\$\\|", "\\|\\$\\$\\|(0[1-9]|[12][0-9]|3[01])[/.](0[1-9]|1[012])[/.](19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44)\\d\\d\\|\\$\\$\\|", "\\|\\$\\$\\|(0[1-9]|[12][0-9]|3[01])[/.](0[1-9]|1[012])[/.](19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44)\\d\\d\\|\\$\\$\\|", "\\|\\$\\$\\|(.{1,200})\\|\\$\\$\\|", "\\|\\$\\$\\|(.{1,200})\\|\\$\\$\\|", "\\|\\$\\$\\|(|1|2|3|4|5|6)\\|\\$\\$\\|", "\\|\\$\\$\\|(0|1)\\|\\$\\$\\|", "\\|\\$\\$\\|(0|1)\\|\\$\\$\\|", "\\|\\$\\$\\|(http(?i:s)?\\:\\/\\/[a-zA-Z0-9\\-]+(?:\\.[a-zA-Z0-9\\-]+)*\\.[a-zA-Z]{2,6}[\\w\\d\\\\\\/-](.*))", "\\|\\$\\$\\|(0|1)"};
        String[] Campo1 = new String[]{"PRESTADOR", "", "", "", "", "", "", "", "", "", "", "MASDEUNDIGITO", "", "DEFECTON", "", "MENORIGUALHOY", "MUNICIPIOS", "", "", "DEFECTO0", "DEFECTO0", "MENOSDEMIL", ""};
        String[] Campo2 = new String[]{"", "", "", "", "", "", "PROFESIONALES", "", "MAYORACERO", "", "", "", "", "", "MENORIGUALHOY", "MENORSEISMESES", "", "", "", "", "", "", ""};
        
        String[] Retorno = new String[] {"","","",""};
        
        valor1 = ExpresionRegular[cuenta-1];
        valor2 = VariableNombre[cuenta-1];
        valor3 = Campo1[cuenta-1];
        valor4 = Campo2[cuenta-1];
        
        Retorno = new String[] {valor1,valor2,valor3,valor4};
        
        return Retorno;
    }
            
    public String[] Municipios(String IDMunicipio)
    {
        String valor1,valor2;
        valor1=valor2="";
        
        String[] Municipio = new String[]{"05000", "08000", "11000", "13000", "15000", "17000", "18000", "19000", "20000", "23000", "25000", "27000", "41000", "44000", "47000", "50000", "52000", "54000", "63000", "66000", "68000", "70000", "73000", "76000", "81000", "85000", "86000", "88000", "91000", "94000", "95000", "97000", "99000", "05001", "05002", "05004", "05021", "05030", "05031", "05034", "05036", "05038", "05040", "05042", "05044", "05045", "05051", "05055", "05059", "05079", "05086", "05088", "05091", "05093", "05101", "05107", "05113", "05120", "05125", "05129", "05134", "05138", "05142", "05145", "05147", "05148", "05150", "05154", "05172", "05190", "05197", "05206", "05209", "05212", "05234", "05237", "05240", "05250", "05264", "05266", "05282", "05284", "05306", "05308", "05310", "05313", "05315", "05318", "05321", "05347", "05353", "05360", "05361", "05364", "05368", "05376", "05380", "05390", "05400", "05411", "05425", "05440", "05467", "05475", "05480", "05483", "05490", "05495", "05501", "05541", "05543", "05576", "05579", "05585", "05591", "05604", "05607", "05615", "05628", "05631", "05642", "05647", "05649", "05652", "05656", "05658", "05659", "05660", "05664", "05665", "05667", "05670", "05674", "05679", "05686", "05690", "05697", "05736", "05756", "05761", "05789", "05790", "05792", "05809", "05819", "05837", "05842", "05847", "05854", "05856", "05858", "05861", "05873", "05885", "05887", "05890", "05893", "05895", "08001", "08078", "08137", "08141", "08296", "08372", "08421", "08433", "08436", "08520", "08549", "08558", "08560", "08573", "08606", "08634", "08638", "08675", "08685", "08758", "08770", "08832", "08849", "11001", "13001", "13006", "13030", "13042", "13052", "13062", "13074", "13140", "13160", "13188", "13212", "13222", "13244", "13248", "13268", "13300", "13430", "13433", "13440", "13442", "13458", "13468", "13473", "13549", "13580", "13600", "13620", "13647", "13650", "13654", "13655", "13657", "13667", "13670", "13673", "13683", "13688", "13744", "13760", "13780", "13810", "13836", "13838", "13873", "13894", "15001", "15022", "15047", "15051", "15087", "15090", "15092", "15097", "15104", "15106", "15109", "15114", "15131", "15135", "15162", "15172", "15176", "15180", "15183", "15185", "15187", "15189", "15204", "15212", "15215", "15218", "15223", "15224", "15226", "15232", "15236", "15238", "15244", "15248", "15276", "15293", "15296", "15299", "15317", "15322", "15325", "15332", "15362", "15367", "15368", "15377", "15380", "15401", "15403", "15407", "15425", "15442", "15455", "15464", "15466", "15469", "15476", "15480", "15491", "15494", "15500", "15507", "15511", "15514", "15516", "15518", "15522", "15531", "15533", "15537", "15542", "15550", "15572", "15580", "15599", "15600", "15621", "15632", "15638", "15646", "15660", "15664", "15667", "15673", "15676", "15681", "15686", "15690", "15693", "15696", "15720", "15723", "15740", "15753", "15755", "15757", "15759", "15761", "15762", "15763", "15764", "15774", "15776", "15778", "15790", "15798", "15804", "15806", "15808", "15810", "15814", "15816", "15820", "15822", "15832", "15835", "15837", "15839", "15842", "15861", "15879", "15897", "17001", "17013", "17042", "17050", "17088", "17174", "17272", "17380", "17388", "17433", "17442", "17444", "17446", "17486", "17495", "17513", "17524", "17541", "17614", "17616", "17653", "17662", "17665", "17777", "17867", "17873", "17877", "18001", "18029", "18094", "18150", "18205", "18247", "18256", "18410", "18460", "18479", "18592", "18610", "18753", "18756", "18785", "18860", "19001", "19022", "19050", "19075", "19100", "19110", "19130", "19137", "19142", "19212", "19256", "19290", "19300", "19318", "19355", "19364", "19392", "19397", "19418", "19450", "19455", "19473", "19513", "19517", "19532", "19533", "19548", "19573", "19585", "19622", "19693", "19698", "19701", "19743", "19760", "19780", "19785", "19807", "19809", "19821", "19824", "19845", "20001", "20011", "20013", "20032", "20045", "20060", "20175", "20178", "20228", "20238", "20250", "20295", "20310", "20383", "20400", "20443", "20517", "20550", "20570", "20614", "20621", "20710", "20750", "20770", "20787", "23001", "23068", "23079", "23090", "23162", "23168", "23182", "23189", "23300", "23350", "23417", "23419", "23464", "23466", "23500", "23555", "23570", "23574", "23580", "23586", "23660", "23670", "23672", "23675", "23678", "23686", "23807", "23855", "25001", "15272", "25019", "25035", "25040", "25053", "25086", "25095", "25099", "25120", "25123", "25126", "25148", "25151", "25154", "25168", "25175", "25178", "25181", "25183", "25200", "25214", "25224", "25245", "25258", "25260", "25269", "25279", "25281", "25286", "25288", "25290", "25293", "25295", "25297", "25299", "25307", "25312", "25317", "25320", "25322", "25324", "25326", "25328", "25335", "25339", "25368", "25372", "25377", "25386", "25394", "25398", "25402", "25407", "25426", "25430", "25436", "25438", "25473", "25483", "25486", "25488", "25489", "25491", "25506", "25513", "25518", "25524", "25530", "25535", "25572", "25580", "25592", "25594", "25596", "25599", "25612", "25645", "25649", "25653", "25658", "25662", "25718", "25736", "25740", "25743", "25745", "25754", "25758", "25769", "25772", "25777", "25779", "25781", "25785", "25793", "25797", "25799", "25805", "25807", "25815", "25817", "25823", "25839", "25841", "25843", "25845", "25851", "25862", "25867", "25871", "25873", "25875", "25878", "25885", "25898", "25899", "27001", "27006", "27025", "27050", "27073", "27075", "27077", "27086", "27099", "27135", "27150", "27160", "27205", "27245", "27250", "27361", "27372", "27413", "27425", "27430", "27450", "27491", "27495", "27580", "27600", "27615", "27660", "27745", "27787", "27800", "27810", "41001", "41006", "41013", "41016", "41020", "41026", "41078", "41132", "41206", "41244", "41298", "41306", "41319", "41349", "41357", "41359", "41378", "41396", "41483", "41503", "41518", "41524", "41530", "41548", "41551", "41615", "41660", "41668", "41676", "41770", "41791", "41797", "41799", "41801", "41807", "41872", "41885", "44001", "44035", "44078", "44090", "44098", "44110", "44279", "44378", "44420", "44430", "44560", "44650", "44847", "44855", "44874", "47001", "47030", "47053", "47058", "47161", "47170", "47189", "47205", "47245", "47258", "47268", "47288", "47318", "47460", "47541", "47545", "47551", "47555", "47570", "47605", "47660", "47675", "47692", "47703", "47707", "47720", "47745", "47798", "47960", "47980", "50001", "50006", "50110", "50124", "50150", "50223", "50226", "50245", "50251", "50270", "50287", "50313", "50318", "50325", "50330", "50350", "50370", "50400", "50450", "50568", "50573", "50577", "50590", "50606", "50680", "50683", "50686", "50689", "50711", "52001", "52019", "52022", "52036", "52051", "52079", "52083", "52110", "52203", "52207", "52210", "52215", "52224", "52227", "52233", "52240", "52250", "52254", "52256", "52258", "52260", "52287", "52317", "52320", "52323", "52352", "52354", "52356", "52378", "52381", "52385", "52390", "52399", "52405", "52411", "52418", "52427", "52435", "52473", "52480", "52490", "52506", "52520", "52540", "52560", "52565", "52573", "52585", "52612", "52621", "52678", "52683", "52685", "52687", "52693", "52694", "52696", "52699", "52720", "52786", "52788", "52835", "52838", "52885", "54001", "54003", "54051", "54099", "54109", "54125", "54128", "54172", "54174", "54206", "54223", "54239", "54245", "54250", "54261", "54313", "54344", "54347", "54377", "54385", "54398", "54405", "54418", "54480", "54498", "54518", "54520", "54553", "54599", "54660", "54670", "54673", "54680", "54720", "54743", "54800", "54810", "54820", "54871", "54874", "63001", "63111", "63130", "63190", "63212", "63272", "63302", "63401", "63470", "63548", "63594", "63690", "66001", "66045", "66075", "66088", "66170", "66318", "66383", "66400", "66440", "66456", "66572", "66594", "66682", "66687", "68001", "68013", "68020", "68051", "68077", "68079", "68081", "68092", "68101", "68121", "68132", "68147", "68152", "68160", "68162", "68167", "68169", "68176", "68179", "68190", "68207", "68209", "68211", "68217", "68229", "68235", "68245", "68250", "68255", "68264", "68266", "68271", "68276", "68296", "68298", "68307", "68318", "68320", "68322", "68324", "68327", "68344", "68368", "68370", "68377", "68385", "68397", "68406", "68418", "68425", "68432", "68444", "68464", "68468", "68498", "68500", "68502", "68522", "68524", "68533", "68547", "68549", "68572", "68573", "68575", "68615", "68655", "68669", "68673", "68679", "68682", "68684", "68686", "68689", "68705", "68720", "68745", "68755", "68770", "68773", "68780", "68820", "68855", "68861", "68867", "68872", "68895", "70001", "70110", "70124", "70204", "70215", "70221", "70230", "70233", "70235", "70265", "70400", "70418", "70429", "70473", "70508", "70523", "70670", "70678", "70702", "70708", "70713", "70717", "70742", "70771", "70820", "70823", "73001", "73024", "73026", "73030", "73043", "73055", "73067", "73124", "73148", "73152", "73168", "73200", "73217", "73226", "73236", "73268", "73270", "73275", "73283", "73319", "73347", "73349", "73352", "73408", "73411", "73443", "73449", "73461", "73483", "73504", "73520", "73547", "73555", "73563", "73585", "73616", "73622", "73624", "73671", "73675", "73678", "73686", "73770", "73854", "73861", "73870", "73873", "76001", "76020", "76036", "76041", "76054", "76100", "76109", "76111", "76113", "76122", "76126", "76130", "76147", "76233", "76243", "76246", "76248", "76250", "76275", "76306", "76318", "76364", "76377", "76400", "76403", "76497", "76520", "76563", "76606", "76616", "76622", "76670", "76736", "76823", "76828", "76834", "76845", "76863", "76869", "76890", "76892", "76895", "81001", "81065", "81220", "81300", "81591", "81736", "81794", "85001", "85010", "85015", "85125", "85136", "85139", "85162", "85225", "85230", "85250", "85263", "85279", "85300", "85315", "85325", "85400", "85410", "85430", "85440", "86001", "86219", "86320", "86568", "86569", "86571", "86573", "86749", "86755", "86757", "86760", "86865", "86885", "88001", "88564", "91001", "91263", "91405", "91407", "91430", "91460", "91530", "91536", "91540", "91669", "91798", "94001", "94343", "94663", "94883", "94884", "94885", "94886", "94887", "94888", "95001", "95015", "95025", "95200", "97001", "97161", "97511", "97666", "97777", "97889", "99001", "99524", "99624", "99773", "00000", "13490", "23682", "23815"};
        String[] Nombre = new String[]{"Dpto. Antioquia", "Dpto. Atlántico", "Bogotá, D.C.", "Dpto. Bolívar", "Dpto. Boyacá", "Dpto. Caldas", "Dpto. Caquetá", "Dpto. Cauca", "Dpto. Cesar", "Dpto. Córdoba", "Dpto. Cundinamarca", "Dpto. Chocó", "Dpto. Huila", "Dpto. La Guajira", "Dpto. Magdalena", "Dpto. Meta", "Dpto. Nariño", "Dpto. Norte de Santander", "Dpto. Quindio", "Dpto. Risaralda", "Dpto. Santander", "Dpto. Sucre", "Dpto. Tolima", "Dpto. Valle del Cauca", "Dpto. Arauca", "Dpto. Casanare", "Dpto. Putumayo", "Dpto. San Andrés Y Providencia", "Dpto. Amazonas", "Dpto. Guainía", "Dpto. Guaviare", "Dpto. Vaupés", "Dpto. Vichada", "MEDELLÍN", "ABEJORRAL", "ABRIAQUÍ", "ALEJANDRÍA", "AMAGÁ", "AMALFI", "ANDES", "ANGELÓPOLIS", "ANGOSTURA", "ANORÍ", "SANTAFÉ DE ANTIOQUIA", "ANZA", "APARTADÓ", "ARBOLETES", "ARGELIA", "ARMENIA", "BARBOSA", "BELMIRA", "BELLO", "BETANIA", "BETULIA", "CIUDAD BOLÍVAR", "BRICEÑO", "BURITICÁ", "CÁCERES", "CAICEDO", "CALDAS", "CAMPAMENTO", "CAÑASGORDAS", "CARACOLÍ", "CARAMANTA", "CAREPA", "EL CARMEN DE VIBORAL", "CAROLINA", "CAUCASIA", "CHIGORODÓ", "CISNEROS", "COCORNÁ", "CONCEPCIÓN", "CONCORDIA", "COPACABANA", "DABEIBA", "DON MATÍAS", "EBÉJICO", "EL BAGRE", "ENTRERRIOS", "ENVIGADO", "FREDONIA", "FRONTINO", "GIRALDO", "GIRARDOTA", "GÓMEZ PLATA", "GRANADA", "GUADALUPE", "GUARNE", "GUATAPE", "HELICONIA", "HISPANIA", "ITAGUI", "ITUANGO", "JARDÍN", "JERICÓ", "LA CEJA", "LA ESTRELLA", "LA PINTADA", "LA UNIÓN", "LIBORINA", "MACEO", "MARINILLA", "MONTEBELLO", "MURINDÓ", "MUTATÁ", "NARIÑO", "NECOCLÍ", "NECHÍ", "OLAYA", "PEÑOL", "PEQUE", "PUEBLORRICO", "PUERTO BERRÍO", "PUERTO NARE", "PUERTO TRIUNFO", "REMEDIOS", "RETIRO", "RIONEGRO", "SABANALARGA", "SABANETA", "SALGAR", "SAN ANDRÉS DE CUERQUÍA", "SAN CARLOS", "SAN FRANCISCO", "SAN JERÓNIMO", "SAN JOSÉ DE LA MONTAÑA", "SAN JUAN DE URABÁ", "SAN LUIS", "SAN PEDRO DE LOS MILAGROS", "SAN PEDRO DE URABA", "SAN RAFAEL", "SAN ROQUE", "SAN VICENTE", "SANTA BÁRBARA", "SANTA ROSA DE OSOS", "SANTO DOMINGO", "EL SANTUARIO", "SEGOVIA", "SONSON", "SOPETRÁN", "TÁMESIS", "TARAZÁ", "TARSO", "TITIRIBÍ", "TOLEDO", "TURBO", "URAMITA", "URRAO", "VALDIVIA", "VALPARAÍSO", "VEGACHÍ", "VENECIA", "VIGÍA DEL FUERTE", "YALÍ", "YARUMAL", "YOLOMBÓ", "YONDÓ", "ZARAGOZA", "BARRANQUILLA", "BARANOA", "CAMPO DE LA CRUZ", "CANDELARIA", "GALAPA", "JUAN DE ACOSTA", "LURUACO", "MALAMBO", "MANATÍ", "PALMAR DE VARELA", "PIOJÓ", "POLONUEVO", "PONEDERA", "PUERTO COLOMBIA", "REPELÓN", "SABANAGRANDE", "SABANALARGA", "SANTA LUCÍA", "SANTO TOMÁS", "SOLEDAD", "SUAN", "TUBARÁ", "USIACURÍ", "BOGOTÁ, D.C.", "CARTAGENA", "ACHÍ", "ALTOS DEL ROSARIO", "ARENAL", "ARJONA", "ARROYOHONDO", "BARRANCO DE LOBA", "CALAMAR", "CANTAGALLO", "CICUCO", "CÓRDOBA", "CLEMENCIA", "EL CARMEN DE BOLÍVAR", "EL GUAMO", "EL PEÑÓN", "HATILLO DE LOBA", "MAGANGUÉ", "MAHATES", "MARGARITA", "MARÍA LA BAJA", "MONTECRISTO", "MOMPÓS", "MORALES", "PINILLOS", "REGIDOR", "RÍO VIEJO", "SAN CRISTÓBAL", "SAN ESTANISLAO", "SAN FERNANDO", "SAN JACINTO", "SAN JACINTO DEL CAUCA", "SAN JUAN NEPOMUCENO", "SAN MARTÍN DE LOBA", "SAN PABLO", "SANTA CATALINA", "SANTA ROSA", "SANTA ROSA DEL SUR", "SIMITÍ", "SOPLAVIENTO", "TALAIGUA NUEVO", "TIQUISIO", "TURBACO", "TURBANÁ", "VILLANUEVA", "ZAMBRANO", "TUNJA", "ALMEIDA", "AQUITANIA", "ARCABUCO", "BELÉN", "BERBEO", "BETÉITIVA", "BOAVITA", "BOYACÁ", "BRICEÑO", "BUENAVISTA", "BUSBANZÁ", "CALDAS", "CAMPOHERMOSO", "CERINZA", "CHINAVITA", "CHIQUINQUIRÁ", "CHISCAS", "CHITA", "CHITARAQUE", "CHIVATÁ", "CIÉNEGA", "CÓMBITA", "COPER", "CORRALES", "COVARACHÍA", "CUBARÁ", "CUCAITA", "CUÍTIVA", "CHÍQUIZA", "CHIVOR", "DUITAMA", "EL COCUY", "EL ESPINO", "FLORESTA", "GACHANTIVÁ", "GAMEZA", "GARAGOA", "GUACAMAYAS", "GUATEQUE", "GUAYATÁ", "GÜICÁN", "IZA", "JENESANO", "JERICÓ", "LABRANZAGRANDE", "LA CAPILLA", "LA VICTORIA", "LA UVITA", "VILLA DE LEYVA", "MACANAL", "MARIPÍ", "MIRAFLORES", "MONGUA", "MONGUÍ", "MONIQUIRÁ", "MOTAVITA", "MUZO", "NOBSA", "NUEVO COLÓN", "OICATÁ", "OTANCHE", "PACHAVITA", "PÁEZ", "PAIPA", "PAJARITO", "PANQUEBA", "PAUNA", "PAYA", "PAZ DE RÍO", "PESCA", "PISBA", "PUERTO BOYACÁ", "QUÍPAMA", "RAMIRIQUÍ", "RÁQUIRA", "RONDÓN", "SABOYÁ", "SÁCHICA", "SAMACÁ", "SAN EDUARDO", "SAN JOSÉ DE PARE", "SAN LUIS DE GACENO", "SAN MATEO", "SAN MIGUEL DE SEMA", "SAN PABLO DE BORBUR", "SANTANA", "SANTA MARÍA", "SANTA ROSA DE VITERBO", "SANTA SOFÍA", "SATIVANORTE", "SATIVASUR", "SIACHOQUE", "SOATÁ", "SOCOTÁ", "SOCHA", "SOGAMOSO", "SOMONDOCO", "SORA", "SOTAQUIRÁ", "SORACÁ", "SUSACÓN", "SUTAMARCHÁN", "SUTATENZA", "TASCO", "TENZA", "TIBANÁ", "TIBASOSA", "TINJACÁ", "TIPACOQUE", "TOCA", "TOGÜÍ", "TÓPAGA", "TOTA", "TUNUNGUÁ", "TURMEQUÉ", "TUTA", "TUTAZÁ", "UMBITA", "VENTAQUEMADA", "VIRACACHÁ", "ZETAQUIRA", "MANIZALES", "AGUADAS", "ANSERMA", "ARANZAZU", "BELALCÁZAR", "CHINCHINÁ", "FILADELFIA", "LA DORADA", "LA MERCED", "MANZANARES", "MARMATO", "MARQUETALIA", "MARULANDA", "NEIRA", "NORCASIA", "PÁCORA", "PALESTINA", "PENSILVANIA", "RIOSUCIO", "RISARALDA", "SALAMINA", "SAMANÁ", "SAN JOSÉ", "SUPÍA", "VICTORIA", "VILLAMARÍA", "VITERBO", "FLORENCIA", "ALBANIA", "BELÉN DE LOS ANDAQUÍES", "CARTAGENA DEL CHAIRÁ", "CURILLO", "EL DONCELLO", "EL PAUJIL", "LA MONTAÑITA", "MILÁN", "MORELIA", "PUERTO RICO", "SAN JOSÉ DEL FRAGUA", "SAN VICENTE DEL CAGUÁN", "SOLANO", "SOLITA", "VALPARAÍSO", "POPAYÁN", "ALMAGUER", "ARGELIA", "BALBOA", "BOLÍVAR", "BUENOS AIRES", "CAJIBÍO", "CALDONO", "CALOTO", "CORINTO", "EL TAMBO", "FLORENCIA", "GUACHENÉ", "GUAPI", "INZÁ", "JAMBALÓ", "LA SIERRA", "LA VEGA", "LÓPEZ", "MERCADERES", "MIRANDA", "MORALES", "PADILLA", "PAEZ", "PATÍA", "PIAMONTE", "PIENDAMÓ", "PUERTO TEJADA", "PURACÉ", "ROSAS", "SAN SEBASTIÁN", "SANTANDER DE QUILICHAO", "SANTA ROSA", "SILVIA", "SOTARÁ", "SUÁREZ", "SUCRE", "TIMBÍO", "TIMBIQUÍ", "TORIBIO", "TOTORÓ", "VILLA RICA", "VALLEDUPAR", "AGUACHICA", "AGUSTÍN CODAZZI", "ASTREA", "BECERRIL", "BOSCONIA", "CHIMICHAGUA", "CHIRIGUANÁ", "CURUMANÍ", "EL COPEY", "EL PASO", "GAMARRA", "GONZÁLEZ", "LA GLORIA", "LA JAGUA DE IBIRICO", "MANAURE", "PAILITAS", "PELAYA", "PUEBLO BELLO", "RÍO DE ORO", "LA PAZ", "SAN ALBERTO", "SAN DIEGO", "SAN MARTÍN", "TAMALAMEQUE", "MONTERÍA", "AYAPEL", "BUENAVISTA", "CANALETE", "CERETÉ", "CHIMÁ", "CHINÚ", "CIÉNAGA DE ORO", "COTORRA", "LA APARTADA", "LORICA", "LOS CÓRDOBAS", "MOMIL", "MONTELÍBANO", "MOÑITOS", "PLANETA RICA", "PUEBLO NUEVO", "PUERTO ESCONDIDO", "PUERTO LIBERTADOR", "PURÍSIMA", "SAHAGÚN", "SAN ANDRÉS SOTAVENTO", "SAN ANTERO", "SAN BERNARDO DEL VIENTO", "SAN CARLOS", "SAN PELAYO", "TIERRALTA", "VALENCIA", "AGUA DE DIOS", "FIRAVITOBA", "ALBÁN", "ANAPOIMA", "ANOLAIMA", "ARBELÁEZ", "BELTRÁN", "BITUIMA", "BOJACÁ", "CABRERA", "CACHIPAY", "CAJICÁ", "CAPARRAPÍ", "CAQUEZA", "CARMEN DE CARUPA", "CHAGUANÍ", "CHÍA", "CHIPAQUE", "CHOACHÍ", "CHOCONTÁ", "COGUA", "COTA", "CUCUNUBÁ", "EL COLEGIO", "EL PEÑÓN", "EL ROSAL", "FACATATIVÁ", "FOMEQUE", "FOSCA", "FUNZA", "FÚQUENE", "FUSAGASUGÁ", "GACHALA", "GACHANCIPÁ", "GACHETÁ", "GAMA", "GIRARDOT", "GRANADA", "GUACHETÁ", "GUADUAS", "GUASCA", "GUATAQUÍ", "GUATAVITA", "GUAYABAL DE SIQUIMA", "GUAYABETAL", "GUTIÉRREZ", "JERUSALÉN", "JUNÍN", "LA CALERA", "LA MESA", "LA PALMA", "LA PEÑA", "LA VEGA", "LENGUAZAQUE", "MACHETA", "MADRID", "MANTA", "MEDINA", "MOSQUERA", "NARIÑO", "NEMOCÓN", "NILO", "NIMAIMA", "NOCAIMA", "VENECIA", "PACHO", "PAIME", "PANDI", "PARATEBUENO", "PASCA", "PUERTO SALGAR", "PULÍ", "QUEBRADANEGRA", "QUETAME", "QUIPILE", "APULO", "RICAURTE", "SAN ANTONIO DEL TEQUENDAMA", "SAN BERNARDO", "SAN CAYETANO", "SAN FRANCISCO", "SAN JUAN DE RÍO SECO", "SASAIMA", "SESQUILÉ", "SIBATÉ", "SILVANIA", "SIMIJACA", "SOACHA", "SOPÓ", "SUBACHOQUE", "SUESCA", "SUPATÁ", "SUSA", "SUTATAUSA", "TABIO", "TAUSA", "TENA", "TENJO", "TIBACUY", "TIBIRITA", "TOCAIMA", "TOCANCIPÁ", "TOPAIPÍ", "UBALÁ", "UBAQUE", "UBATE", "UNE", "ÚTICA", "VERGARA", "VIANÍ", "VILLAGÓMEZ", "VILLAPINZÓN", "VILLETA", "VIOTÁ", "YACOPÍ", "ZIPACÓN", "ZIPAQUIRÁ", "QUIBDÓ", "ACANDÍ", "ALTO BAUDÓ", "ATRATO", "BAGADÓ", "BAHÍA SOLANO", "BAJO BAUDÓ", "BELÉN DE BAJIRÁ", "BOJAYA", "EL CANTÓN DEL SAN PABLO", "CARMEN DEL DARIEN", "CÉRTEGUI", "CONDOTO", "EL CARMEN DE ATRATO", "EL LITORAL DEL SAN JUAN", "ISTMINA", "JURADÓ", "LLORÓ", "MEDIO ATRATO", "MEDIO BAUDÓ", "MEDIO SAN JUAN", "NÓVITA", "NUQUÍ", "RÍO IRÓ", "RÍO QUITO", "RIOSUCIO", "SAN JOSÉ DEL PALMAR", "SIPÍ", "TADÓ", "UNGUÍA", "UNIÓN PANAMERICANA", "NEIVA", "ACEVEDO", "AGRADO", "AIPE", "ALGECIRAS", "ALTAMIRA", "BARAYA", "CAMPOALEGRE", "COLOMBIA", "ELÍAS", "GARZÓN", "GIGANTE", "GUADALUPE", "HOBO", "IQUIRA", "ISNOS", "LA ARGENTINA", "LA PLATA", "NÁTAGA", "OPORAPA", "PAICOL", "PALERMO", "PALESTINA", "PITAL", "PITALITO", "RIVERA", "SALADOBLANCO", "SAN AGUSTÍN", "SANTA MARÍA", "SUAZA", "TARQUI", "TESALIA", "TELLO", "TERUEL", "TIMANÁ", "VILLAVIEJA", "YAGUARÁ", "RIOHACHA", "ALBANIA", "BARRANCAS", "DIBULLA", "DISTRACCIÓN", "EL MOLINO", "FONSECA", "HATO NUEVO", "LA JAGUA DEL PILAR", "MAICAO", "MANAURE", "SAN JUAN DEL CESAR", "URIBIA", "URUMITA", "VILLANUEVA", "SANTA MARTA", "ALGARROBO", "ARACATACA", "ARIGUANÍ", "CERRO SAN ANTONIO", "CHIBOLO", "CIÉNAGA", "CONCORDIA", "EL BANCO", "EL PIÑON", "EL RETÉN", "FUNDACIÓN", "GUAMAL", "NUEVA GRANADA", "PEDRAZA", "PIJIÑO DEL CARMEN", "PIVIJAY", "PLATO", "PUEBLOVIEJO", "REMOLINO", "SABANAS DE SAN ANGEL", "SALAMINA", "SAN SEBASTIÁN DE BUENAVISTA", "SAN ZENÓN", "SANTA ANA", "SANTA BÁRBARA DE PINTO", "SITIONUEVO", "TENERIFE", "ZAPAYÁN", "ZONA BANANERA", "VILLAVICENCIO", "ACACÍAS", "BARRANCA DE UPÍA", "CABUYARO", "CASTILLA LA NUEVA", "CUBARRAL", "CUMARAL", "EL CALVARIO", "EL CASTILLO", "EL DORADO", "FUENTE DE ORO", "GRANADA", "GUAMAL", "MAPIRIPÁN", "MESETAS", "LA MACARENA", "URIBE", "LEJANÍAS", "PUERTO CONCORDIA", "PUERTO GAITÁN", "PUERTO LÓPEZ", "PUERTO LLERAS", "PUERTO RICO", "RESTREPO", "SAN CARLOS DE GUAROA", "SAN JUAN DE ARAMA", "SAN JUANITO", "SAN MARTÍN", "VISTA HERMOSA", "PASTO", "ALBÁN", "ALDANA", "ANCUYÁ", "ARBOLEDA", "BARBACOAS", "BELÉN", "BUESACO", "COLÓN", "CONSACA", "CONTADERO", "CÓRDOBA", "CUASPUD", "CUMBAL", "CUMBITARA", "CHACHAGÜÍ", "EL CHARCO", "EL PEÑOL", "EL ROSARIO", "EL TABLÓN DE GÓMEZ", "EL TAMBO", "FUNES", "GUACHUCAL", "GUAITARILLA", "GUALMATÁN", "ILES", "IMUÉS", "IPIALES", "LA CRUZ", "LA FLORIDA", "LA LLANADA", "LA TOLA", "LA UNIÓN", "LEIVA", "LINARES", "LOS ANDES", "MAGÜI", "MALLAMA", "MOSQUERA", "NARIÑO", "OLAYA HERRERA", "OSPINA", "FRANCISCO PIZARRO", "POLICARPA", "POTOSÍ", "PROVIDENCIA", "PUERRES", "PUPIALES", "RICAURTE", "ROBERTO PAYÁN", "SAMANIEGO", "SANDONÁ", "SAN BERNARDO", "SAN LORENZO", "SAN PABLO", "SAN PEDRO DE CARTAGO", "SANTA BÁRBARA", "SANTACRUZ", "SAPUYES", "TAMINANGO", "TANGUA", "TUMACO", "TÚQUERRES", "YACUANQUER", "CÚCUTA", "ABREGO", "ARBOLEDAS", "BOCHALEMA", "BUCARASICA", "CÁCOTA", "CACHIRÁ", "CHINÁCOTA", "CHITAGÁ", "CONVENCIÓN", "CUCUTILLA", "DURANIA", "EL CARMEN", "EL TARRA", "EL ZULIA", "GRAMALOTE", "HACARÍ", "HERRÁN", "LABATECA", "LA ESPERANZA", "LA PLAYA", "LOS PATIOS", "LOURDES", "MUTISCUA", "OCAÑA", "PAMPLONA", "PAMPLONITA", "PUERTO SANTANDER", "RAGONVALIA", "SALAZAR", "SAN CALIXTO", "SAN CAYETANO", "SANTIAGO", "SARDINATA", "SILOS", "TEORAMA", "TIBÚ", "TOLEDO", "VILLA CARO", "VILLA DEL ROSARIO", "ARMENIA", "BUENAVISTA", "CALARCA", "CIRCASIA", "CÓRDOBA", "FILANDIA", "GÉNOVA", "LA TEBAIDA", "MONTENEGRO", "PIJAO", "QUIMBAYA", "SALENTO", "PEREIRA", "APÍA", "BALBOA", "BELÉN DE UMBRÍA", "DOSQUEBRADAS", "GUÁTICA", "LA CELIA", "LA VIRGINIA", "MARSELLA", "MISTRATÓ", "PUEBLO RICO", "QUINCHÍA", "SANTA ROSA DE CABAL", "SANTUARIO", "BUCARAMANGA", "AGUADA", "ALBANIA", "ARATOCA", "BARBOSA", "BARICHARA", "BARRANCABERMEJA", "BETULIA", "BOLÍVAR", "CABRERA", "CALIFORNIA", "CAPITANEJO", "CARCASÍ", "CEPITÁ", "CERRITO", "CHARALÁ", "CHARTA", "CHIMA", "CHIPATÁ", "CIMITARRA", "CONCEPCIÓN", "CONFINES", "CONTRATACIÓN", "COROMORO", "CURITÍ", "EL CARMEN DE CHUCURÍ", "EL GUACAMAYO", "EL PEÑÓN", "EL PLAYÓN", "ENCINO", "ENCISO", "FLORIÁN", "FLORIDABLANCA", "GALÁN", "GAMBITA", "GIRÓN", "GUACA", "GUADALUPE", "GUAPOTÁ", "GUAVATÁ", "GÜEPSA", "HATO", "JESÚS MARÍA", "JORDÁN", "LA BELLEZA", "LANDÁZURI", "LA PAZ", "LEBRIJA", "LOS SANTOS", "MACARAVITA", "MÁLAGA", "MATANZA", "MOGOTES", "MOLAGAVITA", "OCAMONTE", "OIBA", "ONZAGA", "PALMAR", "PALMAS DEL SOCORRO", "PÁRAMO", "PIEDECUESTA", "PINCHOTE", "PUENTE NACIONAL", "PUERTO PARRA", "PUERTO WILCHES", "RIONEGRO", "SABANA DE TORRES", "SAN ANDRÉS", "SAN BENITO", "SAN GIL", "SAN JOAQUÍN", "SAN JOSÉ DE MIRANDA", "SAN MIGUEL", "SAN VICENTE DE CHUCURÍ", "SANTA BÁRBARA", "SANTA HELENA DEL OPÓN", "SIMACOTA", "SOCORRO", "SUAITA", "SUCRE", "SURATÁ", "TONA", "VALLE DE SAN JOSÉ", "VÉLEZ", "VETAS", "VILLANUEVA", "ZAPATOCA", "SINCELEJO", "BUENAVISTA", "CAIMITO", "COLOSO", "COROZAL", "COVEÑAS", "CHALÁN", "EL ROBLE", "GALERAS", "GUARANDA", "LA UNIÓN", "LOS PALMITOS", "MAJAGUAL", "MORROA", "OVEJAS", "PALMITO", "SAMPUÉS", "SAN BENITO ABAD", "SAN JUAN DE BETULIA", "SAN MARCOS", "SAN ONOFRE", "SAN PEDRO", "SAN LUIS DE SINCÉ", "SUCRE", "SANTIAGO DE TOLÚ", "TOLÚ VIEJO", "IBAGUÉ", "ALPUJARRA", "ALVARADO", "AMBALEMA", "ANZOÁTEGUI", "ARMERO", "ATACO", "CAJAMARCA", "CARMEN DE APICALÁ", "CASABIANCA", "CHAPARRAL", "COELLO", "COYAIMA", "CUNDAY", "DOLORES", "ESPINAL", "FALAN", "FLANDES", "FRESNO", "GUAMO", "HERVEO", "HONDA", "ICONONZO", "LÉRIDA", "LÍBANO", "MARIQUITA", "MELGAR", "MURILLO", "NATAGAIMA", "ORTEGA", "PALOCABILDO", "PIEDRAS", "PLANADAS", "PRADO", "PURIFICACIÓN", "RIOBLANCO", "RONCESVALLES", "ROVIRA", "SALDAÑA", "SAN ANTONIO", "SAN LUIS", "SANTA ISABEL", "SUÁREZ", "VALLE DE SAN JUAN", "VENADILLO", "VILLAHERMOSA", "VILLARRICA", "CALI", "ALCALÁ", "ANDALUCÍA", "ANSERMANUEVO", "ARGELIA", "BOLÍVAR", "BUENAVENTURA", "BUGA", "BUGALAGRANDE", "CAICEDONIA", "CALIMA", "CANDELARIA", "CARTAGO", "DAGUA", "EL ÁGUILA", "EL CAIRO", "EL CERRITO", "EL DOVIO", "FLORIDA", "GINEBRA", "GUACARÍ", "JAMUNDÍ", "LA CUMBRE", "LA UNIÓN", "LA VICTORIA", "OBANDO", "PALMIRA", "PRADERA", "RESTREPO", "RIOFRÍO", "ROLDANILLO", "SAN PEDRO", "SEVILLA", "TORO", "TRUJILLO", "TULUÁ", "ULLOA", "VERSALLES", "VIJES", "YOTOCO", "YUMBO", "ZARZAL", "ARAUCA", "ARAUQUITA", "CRAVO NORTE", "FORTUL", "PUERTO RONDÓN", "SARAVENA", "TAME", "YOPAL", "AGUAZUL", "CHAMEZA", "HATO COROZAL", "LA SALINA", "MANÍ", "MONTERREY", "NUNCHÍA", "OROCUÉ", "PAZ DE ARIPORO", "PORE", "RECETOR", "SABANALARGA", "SÁCAMA", "SAN LUIS DE PALENQUE", "TÁMARA", "TAURAMENA", "TRINIDAD", "VILLANUEVA", "MOCOA", "COLÓN", "ORITO", "PUERTO ASÍS", "PUERTO CAICEDO", "PUERTO GUZMÁN", "LEGUÍZAMO", "SIBUNDOY", "SAN FRANCISCO", "SAN MIGUEL", "SANTIAGO", "VALLE DEL GUAMUEZ", "VILLAGARZÓN", "SAN ANDRÉS", "PROVIDENCIA", "LETICIA", "EL ENCANTO", "LA CHORRERA", "LA PEDRERA", "LA VICTORIA", "MIRITI-PARANÁ", "PUERTO ALEGRÍA", "PUERTO ARICA", "PUERTO NARIÑO", "PUERTO SANTANDER", "TARAPACÁ", "INÍRIDA", "BARRANCO MINAS", "MAPIRIPANA", "SAN FELIPE", "PUERTO COLOMBIA", "LA GUADALUPE", "CACAHUAL", "PANA PANA", "MORICHAL", "SAN JOSÉ DEL GUAVIARE", "CALAMAR", "EL RETORNO", "MIRAFLORES", "MITÚ", "CARURU", "PACOA", "TARAIRA", "PAPUNAUA", "YAVARATÉ", "PUERTO CARREÑO", "LA PRIMAVERA", "SANTA ROSALÍA", "CUMARIBO", "COLOMBIA", "NOROSÍ", "SAN JOSÉ DE URÉ", "TUCHÍN"};
        String[] Departamento = new String[]{"05", "08", "11", "13", "15", "17", "18", "19", "20", "23", "25", "27", "41", "44", "47", "50", "52", "54", "63", "66", "68", "70", "73", "76", "81", "85", "86", "88", "91", "94", "95", "97", "99", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "05", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "08", "11", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "17", "18", "18", "18", "18", "18", "18", "18", "18", "18", "18", "18", "18", "18", "18", "18", "18", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "19", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "23", "25", "15", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "25", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "27", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "41", "44", "44", "44", "44", "44", "44", "44", "44", "44", "44", "44", "44", "44", "44", "44", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "47", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "52", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "54", "63", "63", "63", "63", "63", "63", "63", "63", "63", "63", "63", "63", "66", "66", "66", "66", "66", "66", "66", "66", "66", "66", "66", "66", "66", "66", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "68", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "73", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "76", "81", "81", "81", "81", "81", "81", "81", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "85", "86", "86", "86", "86", "86", "86", "86", "86", "86", "86", "86", "86", "86", "88", "88", "91", "91", "91", "91", "91", "91", "91", "91", "91", "91", "91", "94", "94", "94", "94", "94", "94", "94", "94", "94", "95", "95", "95", "95", "97", "97", "97", "97", "97", "97", "99", "99", "99", "99", "00", "13", "23", "23"};
                
        String[] Retorno = new String[] {"","",""};
        
        for (int i=0; i<= 23 ;i++ ){
            if (Municipio[i].equals(IDMunicipio)){
                valor1 = Nombre[i];
                valor2 = Departamento[i];
                       
                Retorno = new String[] {valor1,valor2};
            }
                
        }
        
        return Retorno;
    }
    
    static int CuentaLineasArchivo(String NombreDirectorioArchivo) throws FileNotFoundException, IOException
        {
            int lNumeroLineas = 0;
            String sCadena = "";
            
            FileReader fr;
            fr = new FileReader(NombreDirectorioArchivo);
            BufferedReader bf = new BufferedReader(fr);

            while ((sCadena = bf.readLine()) != null)
            {
                lNumeroLineas++;
            }

            return lNumeroLineas;
        }
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prgValidaArchivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new prgValidaArchivo().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArchivo;
    private javax.swing.JButton btnEnviarArchivo;
    private javax.swing.JButton btnExporta;
    private javax.swing.JButton btnValida;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField txtArchivo;
    private javax.swing.JTextField txtDirectorioArchivo;
    private javax.swing.JTextArea txtMensajeNovedad;
    private javax.swing.JTextArea txtMensajeResultados;
    private javax.swing.JTextArea txtValidaContenidoArchivo;
    private javax.swing.JTextArea txtValidaNombreArchivo;
    // End of variables declaration//GEN-END:variables
}
